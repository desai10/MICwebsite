"use strict";var ApplicationConfiguration=function(){var applicationModuleName="mean",applicationModuleVendorDependencies=["ngResource","ngAnimate","ngMessages","ui.router","ui.bootstrap","ui.utils","angularFileUpload"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider","$httpProvider",function($locationProvider,$httpProvider){$locationProvider.html5Mode(!0).hashPrefix("!"),$httpProvider.interceptors.push("authInterceptor")}]),angular.module(ApplicationConfiguration.applicationModuleName).run(["$rootScope","$state","Authentication",function($rootScope,$state,Authentication){function storePreviousState(state,params){state.data&&state.data.ignoreState||($state.previous={state:state,params:params,href:$state.href(state,params)})}$rootScope.$on("$stateChangeStart",function(event,toState,toParams,fromState,fromParams){if(toState.data&&toState.data.roles&&toState.data.roles.length>0){var allowed=!1;toState.data.roles.forEach(function(role){return void 0!==Authentication.user.roles&&-1!==Authentication.user.roles.indexOf(role)?(allowed=!0,!0):void 0}),allowed||(event.preventDefault(),void 0!==Authentication.user&&"object"==typeof Authentication.user?$state.go("forbidden"):$state.go("authentication.signin").then(function(){storePreviousState(toState,toParams)}))}}),$rootScope.$on("$stateChangeSuccess",function(event,toState,toParams,fromState,fromParams){window.scrollTo(0,0),storePreviousState(fromState,fromParams)})}]),angular.element(document).ready(function(){if(window.location.hash&&"#_=_"===window.location.hash)if(window.history&&history.pushState)window.history.pushState("",document.title,window.location.pathname);else{var scroll={top:document.body.scrollTop,left:document.body.scrollLeft};window.location.hash="",document.body.scrollTop=scroll.top,document.body.scrollLeft=scroll.left}angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),function(app){app.registerModule("contacts")}(ApplicationConfiguration),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("core.admin",["core"]),ApplicationConfiguration.registerModule("core.admin.routes",["ui.router"]),function(app){app.registerModule("events")}(ApplicationConfiguration),function(app){app.registerModule("galleries")}(ApplicationConfiguration),function(app){app.registerModule("teams")}(ApplicationConfiguration),ApplicationConfiguration.registerModule("users",["core"]),ApplicationConfiguration.registerModule("users.admin",["core.admin"]),ApplicationConfiguration.registerModule("users.admin.routes",["core.admin.routes"]),function(){function menuConfig(Menus){Menus.addMenuItem("topbar",{title:"Contacts",state:"contacts",type:"dropdown",position:6,roles:["admin"]}),Menus.addSubMenuItem("topbar","contacts",{title:"List Contacts",state:"contacts.list",roles:["admin"]}),Menus.addSubMenuItem("topbar","contacts",{title:"Create Contact",state:"contacts.create",roles:["admin"]}),Menus.addMenuItem("topbar",{title:"Contact",state:"contactus",position:7,roles:["user"]})}angular.module("contacts").run(menuConfig),menuConfig.$inject=["Menus"]}(),function(){function routeConfig($stateProvider){$stateProvider.state("contactus",{url:"/contactus",templateUrl:"modules/contacts/client/views/contact-us.client.view.html",controller:"ContactusController",controllerAs:"vm",data:{roles:["user","admin"]}}).state("contacts",{"abstract":!0,url:"/contacts",template:"<ui-view/>"}).state("contacts.list",{url:"",templateUrl:"modules/contacts/client/views/list-contacts.client.view.html",controller:"ContactsListController",controllerAs:"vm",data:{roles:["user","admin"],pageTitle:"Contacts List"}}).state("contacts.create",{url:"/create",templateUrl:"modules/contacts/client/views/form-contact.client.view.html",controller:"ContactsController",controllerAs:"vm",resolve:{contactResolve:newContact},data:{roles:["user","admin"],pageTitle:"Contacts Create"}}).state("contacts.edit",{url:"/:contactId/edit",templateUrl:"modules/contacts/client/views/form-contact.client.view.html",controller:"ContactsController",controllerAs:"vm",resolve:{contactResolve:getContact},data:{roles:["user","admin"],pageTitle:"Edit Contact {{ contactResolve.name }}"}}).state("contacts.view",{url:"/:contactId",templateUrl:"modules/contacts/client/views/view-contact.client.view.html",controller:"ContactsController",controllerAs:"vm",resolve:{contactResolve:getContact},data:{roles:["user","admin"],pageTitle:"Contact {{ articleResolve.name }}"}})}function getContact($stateParams,ContactsService){return ContactsService.get({contactId:$stateParams.contactId}).$promise}function newContact(ContactsService){return new ContactsService}angular.module("contacts").config(routeConfig),routeConfig.$inject=["$stateProvider"],getContact.$inject=["$stateParams","ContactsService"],newContact.$inject=["ContactsService"]}(),function(){function ContactsController($scope,$state,Authentication,contact){function remove(){confirm("Are you sure you want to delete?")&&vm.contact.$remove($state.go("contacts.list"))}function save(isValid){function successCallback(res){$state.go("contacts.view",{contactId:res._id})}function errorCallback(res){vm.error=res.data.message}return isValid?void(vm.contact._id?vm.contact.$update(successCallback,errorCallback):vm.contact.$save(successCallback,errorCallback)):($scope.$broadcast("show-errors-check-validity","vm.form.contactForm"),!1)}var vm=this;vm.authentication=Authentication,vm.contact=contact,vm.error=null,vm.form={},vm.remove=remove,vm.save=save}angular.module("contacts").controller("ContactsController",ContactsController),ContactsController.$inject=["$scope","$state","Authentication","contactResolve"]}(),function(){function ContactusController($http,$scope,$state,Authentication){function init(){}var vm=this;vm.authentication=Authentication,vm.username=vm.authentication.user.username,vm.userEmail=vm.authentication.user.email,init(),vm.contactUs=function(isValid){if(console.log("sendQueryee started"),!isValid)return $scope.$broadcast("show-errors-check-validity","vm.form.contactUsForm"),!1;console.log("sendQueryasffee started"),$scope.success=$scope.error=null;var data={username:vm.username,userEmail:vm.userEmail,emailBody:vm.emailBody};console.log("sendQuery started"+data.emailBody),$http.post("/api/contactus",data).success(function(response){vm.emailBody=null,$scope.$broadcast("show-errors-reset","vm.form.contactUsForm"),$scope.success=response.message}).error(function(response){$scope.emailBody=null,$scope.error=response.message})}}angular.module("contacts").controller("ContactusController",ContactusController),ContactusController.$inject=["$http","$scope","$state","Authentication"]}(),function(){function ContactsListController(ContactsService){var vm=this;vm.contacts=ContactsService.query()}angular.module("contacts").controller("ContactsListController",ContactsListController),ContactsListController.$inject=["ContactsService"]}(),function(){function ContactsService($resource){return $resource("api/contacts/:contactId",{contactId:"@_id"},{update:{method:"PUT"}})}angular.module("contacts").factory("ContactsService",ContactsService),ContactsService.$inject=["$resource"]}(),angular.module("core.admin").run(["Menus",function(Menus){Menus.addMenuItem("topbar",{title:"Admin",state:"admin",type:"dropdown",roles:["admin"]})}]),angular.module("core.admin.routes").config(["$stateProvider",function($stateProvider){$stateProvider.state("admin",{"abstract":!0,url:"/admin",template:"<ui-view/>",data:{roles:["admin"]}})}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise(function($injector,$location){$injector.get("$state").transitionTo("not-found",null,{location:!1})}),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/client/views/home.client.view.html"}).state("not-found",{url:"/not-found",templateUrl:"modules/core/client/views/404.client.view.html",data:{ignoreState:!0}}).state("bad-request",{url:"/bad-request",templateUrl:"modules/core/client/views/400.client.view.html",data:{ignoreState:!0}}).state("forbidden",{url:"/forbidden",templateUrl:"modules/core/client/views/403.client.view.html",data:{ignoreState:!0}})}]),angular.module("core").controller("HeaderController",["$scope","$state","Authentication","Menus",function($scope,$state,Authentication,Menus){$scope.$state=$state,$scope.authentication=Authentication,$scope.menu=Menus.getMenu("topbar"),$scope.isCollapsed=!1,$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","$state","Authentication",function($scope,$state,Authentication){$scope.authentication=Authentication,$scope.$state=$state,$scope.authentication=Authentication}]),angular.module("core").directive("showErrors",["$timeout","$interpolate",function($timeout,$interpolate){var linkFn=function(scope,el,attrs,formCtrl){var inputEl,inputName,inputNgEl,options,showSuccess,toggleClasses,initCheck=!1,showValidationMessages=!1;if(options=scope.$eval(attrs.showErrors)||{},showSuccess=options.showSuccess||!1,inputEl=el[0].querySelector(".form-control[name]")||el[0].querySelector("[name]"),inputNgEl=angular.element(inputEl),inputName=$interpolate(inputNgEl.attr("name")||"")(scope),!inputName)throw"show-errors element has no child input elements with a 'name' attribute class";var reset=function(){return $timeout(function(){el.removeClass("has-error"),el.removeClass("has-success"),showValidationMessages=!1},0,!1)};scope.$watch(function(){return formCtrl[inputName]&&formCtrl[inputName].$invalid},function(invalid){return toggleClasses(invalid)}),scope.$on("show-errors-check-validity",function(event,name){return angular.isUndefined(name)||formCtrl.$name===name?(initCheck=!0,showValidationMessages=!0,toggleClasses(formCtrl[inputName].$invalid)):void 0}),scope.$on("show-errors-reset",function(event,name){return angular.isUndefined(name)||formCtrl.$name===name?reset():void 0}),toggleClasses=function(invalid){return el.toggleClass("has-error",showValidationMessages&&invalid),showSuccess?el.toggleClass("has-success",showValidationMessages&&!invalid):void 0}};return{restrict:"A",require:"^form",compile:function(elem,attrs){if(-1===attrs.showErrors.indexOf("skipFormGroupCheck")&&!elem.hasClass("form-group")&&!elem.hasClass("input-group"))throw"show-errors element does not have the 'form-group' or 'input-group' class";return linkFn}}}]),angular.module("core").factory("authInterceptor",["$q","$injector",function($q,$injector){return{responseError:function(rejection){if(!rejection.config.ignoreAuthModule)switch(rejection.status){case 401:$injector.get("$state").transitionTo("authentication.signin");break;case 403:$injector.get("$state").transitionTo("forbidden")}return $q.reject(rejection)}}}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["user","admin"],this.menus={};var shouldRender=function(user){if(~this.roles.indexOf("*"))return!0;if(!user)return!1;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exist")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,options){return options=options||{},this.menus[menuId]={roles:options.roles||this.defaultRoles,items:options.items||[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,options){if(options=options||{},this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:options.title||"",state:options.state||"",type:options.type||"item","class":options["class"],roles:null===options.roles||"undefined"==typeof options.roles?this.defaultRoles:options.roles,position:options.position||0,items:[],shouldRender:shouldRender}),options.items)for(var i in options.items)this.addSubMenuItem(menuId,options.state,options.items[i]);return this.menus[menuId]},this.addSubMenuItem=function(menuId,parentItemState,options){options=options||{},this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].state===parentItemState&&this.menus[menuId].items[itemIndex].items.push({title:options.title||"",state:options.state||"",roles:null===options.roles||"undefined"==typeof options.roles?this.menus[menuId].items[itemIndex].roles:options.roles,position:options.position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemState){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].state===menuItemState&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemState){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].state===submenuItemState&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar",{roles:["*"]})}]),angular.module("core").service("Socket",["Authentication","$state","$timeout",function(Authentication,$state,$timeout){this.connect=function(){Authentication.user&&(this.socket=io())},this.connect(),this.on=function(eventName,callback){this.socket&&this.socket.on(eventName,function(data){$timeout(function(){callback(data)})})},this.emit=function(eventName,data){this.socket&&this.socket.emit(eventName,data)},this.removeListener=function(eventName){this.socket&&this.socket.removeListener(eventName)}}]),function(){function menuConfig(Menus){Menus.addMenuItem("topbar",{title:"Home",state:"home",position:0,roles:["user"]}),Menus.addMenuItem("topbar",{title:"Events",state:"events",type:"dropdown",position:1,roles:["admin"]}),Menus.addSubMenuItem("topbar","events",{title:"List Events",state:"events.list"}),Menus.addSubMenuItem("topbar","events",{title:"Create Event",state:"events.create",roles:["admin"]}),Menus.addMenuItem("topbar",{title:"Events",state:"events.list",position:2,roles:["user"]})}angular.module("events").run(menuConfig),menuConfig.$inject=["Menus"]}(),function(){function routeConfig($stateProvider){$stateProvider.state("events",{"abstract":!0,url:"/events",template:"<ui-view/>"}).state("events.list",{url:"",templateUrl:"modules/events/client/views/list-events.client.view.html",controller:"EventsListController",controllerAs:"vm",data:{roles:["user","admin"],pageTitle:"Events List"}}).state("events.create",{url:"/create",templateUrl:"modules/events/client/views/form-event.client.view.html",controller:"EventsController",controllerAs:"vm",resolve:{eventResolve:newEvent},data:{roles:["user","admin"],pageTitle:"Events Create"}}).state("events.edit",{url:"/:eventId/edit",templateUrl:"modules/events/client/views/form-event.client.view.html",controller:"EventsController",controllerAs:"vm",resolve:{eventResolve:getEvent},data:{roles:["user","admin"],pageTitle:"Edit Event {{ eventResolve.name }}"}}).state("events.view",{url:"/:eventId",templateUrl:"modules/events/client/views/view-event.client.view.html",controller:"EventsController",controllerAs:"vm",resolve:{eventResolve:getEvent},data:{roles:["user","admin"],pageTitle:"Event {{ articleResolve.name }}"}})}function getEvent($stateParams,EventsService){return EventsService.get({eventId:$stateParams.eventId}).$promise}function newEvent(EventsService){return new EventsService}angular.module("events").config(routeConfig),routeConfig.$inject=["$stateProvider"],getEvent.$inject=["$stateParams","EventsService"],newEvent.$inject=["EventsService"]}(),function(){function EventsController($scope,$state,Authentication,event){function remove(){confirm("Are you sure you want to delete?")&&vm.event.$remove($state.go("events.list"))}function save(isValid){function successCallback(res){$state.go("events.view",{eventId:res._id})}function errorCallback(res){vm.error=res.data.message}return isValid?void(vm.event._id?vm.event.$update(successCallback,errorCallback):vm.event.$save(successCallback,errorCallback)):($scope.$broadcast("show-errors-check-validity","vm.form.eventForm"),!1)}var vm=this;vm.authentication=Authentication,vm.event=event,vm.error=null,vm.form={},vm.remove=remove,vm.save=save}angular.module("events").controller("EventsController",EventsController),EventsController.$inject=["$scope","$state","Authentication","eventResolve"]}(),function(){function EventsListController(EventsService){var vm=this;vm.events=EventsService.query()}angular.module("events").controller("EventsListController",EventsListController),EventsListController.$inject=["EventsService"]}(),function(){function EventsService($resource){return $resource("api/events/:eventId",{eventId:"@_id"},{update:{method:"PUT"}})}angular.module("events").factory("EventsService",EventsService),EventsService.$inject=["$resource"]}(),function(){function menuConfig(Menus){Menus.addMenuItem("topbar",{title:"Galleries",state:"galleries",type:"dropdown",position:3,roles:["admin"]}),Menus.addSubMenuItem("topbar","galleries",{title:"List Galleries",state:"galleries.list"}),Menus.addSubMenuItem("topbar","galleries",{title:"Create Gallery",state:"galleries.create",roles:["admin"]}),Menus.addMenuItem("topbar",{title:"Gallery",state:"galleries.list",position:4,roles:["user"]})}angular.module("galleries").run(menuConfig),menuConfig.$inject=["Menus"]}(),function(){function routeConfig($stateProvider){$stateProvider.state("galleries",{"abstract":!0,url:"/galleries",template:"<ui-view/>"}).state("galleries.list",{url:"",templateUrl:"modules/galleries/client/views/list-galleries.client.view.html",controller:"GalleriesListController",controllerAs:"vm",data:{roles:["user","admin"],pageTitle:"Galleries List"}}).state("galleries.create",{url:"/create",templateUrl:"modules/galleries/client/views/form-gallery.client.view.html",controller:"GalleriesController",controllerAs:"vm",resolve:{galleryResolve:newGallery},data:{roles:["user","admin"],pageTitle:"Galleries Create"}}).state("galleries.edit",{url:"/:galleryId/edit",templateUrl:"modules/galleries/client/views/form-gallery.client.view.html",controller:"GalleriesController",controllerAs:"vm",resolve:{galleryResolve:getGallery},data:{roles:["user","admin"],pageTitle:"Edit Gallery {{ galleryResolve.name }}"}}).state("galleries.view",{url:"/:galleryId",templateUrl:"modules/galleries/client/views/view-gallery.client.view.html",controller:"GalleriesController",controllerAs:"vm",resolve:{galleryResolve:getGallery},data:{roles:["user","admin"],pageTitle:"Gallery {{ articleResolve.name }}"}})}function getGallery($stateParams,GalleriesService){return GalleriesService.get({galleryId:$stateParams.galleryId}).$promise}function newGallery(GalleriesService){return new GalleriesService}angular.module("galleries").config(routeConfig),routeConfig.$inject=["$stateProvider"],getGallery.$inject=["$stateParams","GalleriesService"],newGallery.$inject=["GalleriesService"]}(),function(){function GalleriesController($scope,$state,Authentication,gallery){function remove(){confirm("Are you sure you want to delete?")&&vm.gallery.$remove($state.go("galleries.list"))}function save(isValid){function successCallback(res){$state.go("galleries.view",{galleryId:res._id})}function errorCallback(res){vm.error=res.data.message}return isValid?void(vm.gallery._id?vm.gallery.$update(successCallback,errorCallback):vm.gallery.$save(successCallback,errorCallback)):($scope.$broadcast("show-errors-check-validity","vm.form.galleryForm"),!1)}var vm=this;vm.authentication=Authentication,vm.gallery=gallery,vm.error=null,vm.form={},vm.remove=remove,vm.save=save}angular.module("galleries").controller("GalleriesController",GalleriesController),GalleriesController.$inject=["$scope","$state","Authentication","galleryResolve"]}(),function(){function GalleriesListController(GalleriesService,Authentication){var vm=this;vm.authentication=Authentication,vm.galleries=GalleriesService.query()}angular.module("galleries").controller("GalleriesListController",GalleriesListController),GalleriesListController.$inject=["GalleriesService","Authentication","$animate"]}(),angular.module("galleries").directive("mAppLoading",["$animate",function($animate){function link(scope,element,attributes){$animate.leave(element.children().eq(1)).then(function(){element.remove(),scope=element=attributes=null})}return{link:link,restrict:"C"}}]),function(){function GalleriesService($resource){return $resource("api/galleries/:galleryId",{galleryId:"@_id"},{update:{method:"PUT"}})}angular.module("galleries").factory("GalleriesService",GalleriesService),GalleriesService.$inject=["$resource"]}(),function(){function menuConfig(Menus){Menus.addMenuItem("topbar",{title:"Teams",state:"teams",type:"dropdown",position:5,roles:["admin"]}),Menus.addSubMenuItem("topbar","teams",{title:"List Teams",state:"teams.list"}),Menus.addMenuItem("topbar",{title:"Team",state:"teams.list",position:6,roles:["user"]}),Menus.addSubMenuItem("topbar","teams",{title:"Create Team",state:"teams.create"})}angular.module("teams").run(menuConfig),menuConfig.$inject=["Menus"]}(),function(){function routeConfig($stateProvider){$stateProvider.state("teams",{"abstract":!0,url:"/teams",template:"<ui-view/>"}).state("teams.list",{url:"",templateUrl:"modules/teams/client/views/list-teams.client.view.html",controller:"TeamsListController",controllerAs:"vm",data:{roles:["user","admin"],pageTitle:"Teams List"}}).state("teams.create",{url:"/create",templateUrl:"modules/teams/client/views/form-team.client.view.html",controller:"TeamsController",controllerAs:"vm",resolve:{teamResolve:newTeam},data:{roles:["user","admin"],pageTitle:"Teams Create"}}).state("teams.edit",{url:"/:teamId/edit",templateUrl:"modules/teams/client/views/form-team.client.view.html",controller:"TeamsController",controllerAs:"vm",resolve:{teamResolve:getTeam},data:{roles:["user","admin"],pageTitle:"Edit Team {{ teamResolve.name }}"}}).state("teams.view",{url:"/:teamId",templateUrl:"modules/teams/client/views/view-team.client.view.html",controller:"TeamsController",controllerAs:"vm",resolve:{teamResolve:getTeam},data:{roles:["user","admin"],pageTitle:"Team {{ articleResolve.name }}"}})}function getTeam($stateParams,TeamsService){return TeamsService.get({teamId:$stateParams.teamId}).$promise}function newTeam(TeamsService){return new TeamsService}angular.module("teams").config(routeConfig),routeConfig.$inject=["$stateProvider"],getTeam.$inject=["$stateParams","TeamsService"],newTeam.$inject=["TeamsService"]}(),function(){function TeamsListController(TeamsService,$scope,$state,Authentication,Menus){var vm=this;vm.teams=TeamsService.query(),$scope.authentication=Authentication,$scope.$state=$state,$scope.authentication=Authentication,$scope.menu=Menus.getMenu("topbar"),$scope.isCollapsed=!1,$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1}),$scope.leftOpen=!1,$scope.rightOpen=!1,$scope.isl1Active=!1,$scope.isl2Active=!1,$scope.isr1Active=!1,$scope.isr2Active=!1,$scope.isl1Disabled=!1,$scope.isl2Disabled=!1,$scope.isr1Disabled=!1,$scope.isr2Disabled=!1,$scope.now="l1",$scope.now2="left",$scope.profileDesc="this is the profie of the person selected..!",$scope.profile=function(name){$scope.profileDesc="This is "+name+"'s profile"},$scope.left=function(name,element){$scope.profile(name),$scope.now=element,$scope.now2="left",$scope.leftOpen=!$scope.leftOpen,"l1"===element?$scope.isl1Active=!$scope.isl1Active:"l2"===element?$scope.isl2Active=!$scope.isl2Active:console.log("isactive func error"),$scope.isr1Disabled=!$scope.isr1Disabled,$scope.isr2Disabled=!$scope.isr2Disabled,"l1"!==element?$scope.isl1Disabled=!$scope.isl1Disabled:"l2"!==element?$scope.isl2Disabled=!$scope.isl2Disabled:console.log("isdisabled func error")},$scope.right=function(name,element){$scope.profile(name),$scope.now=element,$scope.now2="right",$scope.rightOpen=!$scope.rightOpen,"r1"===element?$scope.isr1Active=!$scope.isr1Active:"r2"===element?$scope.isr2Active=!$scope.isr2Active:console.log("isactive func error"),$scope.isl1Disabled=!$scope.isl1Disabled,$scope.isl2Disabled=!$scope.isl2Disabled,"r1"!==element?$scope.isr1Disabled=!$scope.isr1Disabled:"r2"!==element?$scope.isr2Disabled=!$scope.isr2Disabled:console.log("isdisabled func error")},$scope.back=function(){"left"===$scope.now2?$scope.left("",$scope.now):"right"===$scope.now2?$scope.right("",$scope.now):console.log("error back fun")}}angular.module("teams").controller("TeamsListController",TeamsListController),TeamsListController.$inject=["TeamsService","$scope","$state","Authentication","Menus"]}(),function(){function TeamsController($scope,$state,Authentication,team){function remove(){confirm("Are you sure you want to delete?")&&vm.team.$remove($state.go("teams.list"))}function save(isValid){function successCallback(res){$state.go("teams.view",{teamId:res._id})}function errorCallback(res){vm.error=res.data.message}return isValid?void(vm.team._id?vm.team.$update(successCallback,errorCallback):vm.team.$save(successCallback,errorCallback)):($scope.$broadcast("show-errors-check-validity","vm.form.teamForm"),!1)}var vm=this;vm.authentication=Authentication,vm.team=team,vm.error=null,vm.form={},vm.remove=remove,vm.save=save}angular.module("teams").controller("TeamsController",TeamsController),TeamsController.$inject=["$scope","$state","Authentication","teamResolve"]}(),function(){function TeamsService($resource){return $resource("api/teams/:teamId",{teamId:"@_id"},{update:{method:"PUT"}})}angular.module("teams").factory("TeamsService",TeamsService),TeamsService.$inject=["$resource"]}(),angular.module("users.admin").run(["Menus",function(Menus){Menus.addSubMenuItem("topbar","admin",{title:"Manage Users",state:"admin.users"})}]),angular.module("users.admin.routes").config(["$stateProvider",function($stateProvider){$stateProvider.state("admin.users",{url:"/users",templateUrl:"modules/users/client/views/admin/list-users.client.view.html",controller:"UserListController"}).state("admin.user",{url:"/users/:userId",templateUrl:"modules/users/client/views/admin/view-user.client.view.html",controller:"UserController",resolve:{userResolve:["$stateParams","Admin",function($stateParams,Admin){return Admin.get({userId:$stateParams.userId})}]}}).state("admin.user-edit",{url:"/users/:userId/edit",templateUrl:"modules/users/client/views/admin/edit-user.client.view.html",controller:"UserController",resolve:{userResolve:["$stateParams","Admin",function($stateParams,Admin){return Admin.get({userId:$stateParams.userId})}]}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("settings",{"abstract":!0,url:"/settings",templateUrl:"modules/users/client/views/settings/settings.client.view.html",data:{roles:["user","admin"]}}).state("settings.profile",{url:"/profile",templateUrl:"modules/users/client/views/settings/edit-profile.client.view.html"}).state("settings.password",{url:"/password",templateUrl:"modules/users/client/views/settings/change-password.client.view.html"}).state("settings.accounts",{url:"/accounts",templateUrl:"modules/users/client/views/settings/manage-social-accounts.client.view.html",data:{roles:["admin"]}}).state("settings.picture",{url:"/picture",templateUrl:"modules/users/client/views/settings/change-profile-picture.client.view.html",data:{roles:["admin"]}}).state("authentication",{"abstract":!0,url:"/authentication",templateUrl:"modules/users/client/views/authentication/authentication.client.view.html"}).state("authentication.signup",{url:"/signup",templateUrl:"modules/users/client/views/authentication/signup.client.view.html"}).state("authentication.signin",{url:"/signin?err",templateUrl:"modules/users/client/views/authentication/signin.client.view.html"}).state("password",{"abstract":!0,url:"/password",template:"<ui-view/>"}).state("password.forgot",{url:"/forgot",templateUrl:"modules/users/client/views/password/forgot-password.client.view.html"}).state("password.reset",{"abstract":!0,url:"/reset",template:"<ui-view/>"}).state("password.reset.invalid",{url:"/invalid",templateUrl:"modules/users/client/views/password/reset-password-invalid.client.view.html"}).state("password.reset.success",{url:"/success",templateUrl:"modules/users/client/views/password/reset-password-success.client.view.html"}).state("password.reset.form",{url:"/:token",templateUrl:"modules/users/client/views/password/reset-password.client.view.html"})}]),angular.module("users.admin").controller("UserListController",["$scope","$filter","Admin",function($scope,$filter,Admin){Admin.query(function(data){$scope.users=data,$scope.buildPager()}),$scope.buildPager=function(){$scope.pagedItems=[],$scope.itemsPerPage=15,$scope.currentPage=1,$scope.figureOutItemsToDisplay()},$scope.figureOutItemsToDisplay=function(){$scope.filteredItems=$filter("filter")($scope.users,{$:$scope.search}),$scope.filterLength=$scope.filteredItems.length;var begin=($scope.currentPage-1)*$scope.itemsPerPage,end=begin+$scope.itemsPerPage;$scope.pagedItems=$scope.filteredItems.slice(begin,end)},$scope.pageChanged=function(){$scope.figureOutItemsToDisplay()}}]),angular.module("users.admin").controller("UserController",["$scope","$state","Authentication","userResolve",function($scope,$state,Authentication,userResolve){$scope.authentication=Authentication,$scope.user=userResolve,$scope.remove=function(user){confirm("Are you sure you want to delete this user?")&&(user?(user.$remove(),$scope.users.splice($scope.users.indexOf(user),1)):$scope.user.$remove(function(){$state.go("admin.users")}))},$scope.update=function(isValid){if(!isValid)return $scope.$broadcast("show-errors-check-validity","userForm"),!1;var user=$scope.user;user.$update(function(){$state.go("admin.user",{userId:user._id})},function(errorResponse){$scope.error=errorResponse.data.message})}}]),angular.module("users").controller("AuthenticationController",["$scope","$state","$http","$location","$window","Authentication","PasswordValidator",function($scope,$state,$http,$location,$window,Authentication,PasswordValidator){$scope.authentication=Authentication,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.error=$location.search().err,$scope.authentication.user&&$location.path("/"),$scope.signup=function(isValid){return $scope.error=null,isValid?void $http.post("/api/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$state.go($state.previous.state.name||"home",$state.previous.params)}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","userForm"),!1)},$scope.signin=function(isValid){return $scope.error=null,isValid?void $http.post("/api/auth/signin",$scope.credentials).success(function(response){
$scope.authentication.user=response,$state.go($state.previous.state.name||"home",$state.previous.params)}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","userForm"),!1)},$scope.callOauthProvider=function(url){$state.previous&&$state.previous.href&&(url+="?redirect_to="+encodeURIComponent($state.previous.href)),$window.location.href=url}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication","PasswordValidator",function($scope,$stateParams,$http,$location,Authentication,PasswordValidator){$scope.authentication=Authentication,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(isValid){return $scope.success=$scope.error=null,isValid?void $http.post("/api/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","forgotPasswordForm"),!1)},$scope.resetUserPassword=function(isValid){return $scope.success=$scope.error=null,isValid?void $http.post("/api/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","resetPasswordForm"),!1)}}]),angular.module("users").controller("ChangePasswordController",["$scope","$http","Authentication","PasswordValidator",function($scope,$http,Authentication,PasswordValidator){$scope.user=Authentication.user,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.changeUserPassword=function(isValid){return $scope.success=$scope.error=null,isValid?void $http.post("/api/users/password",$scope.passwordDetails).success(function(response){$scope.$broadcast("show-errors-reset","passwordForm"),$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","passwordForm"),!1)}}]),angular.module("users").controller("ChangeProfilePictureController",["$scope","$timeout","$window","Authentication","FileUploader",function($scope,$timeout,$window,Authentication,FileUploader){$scope.user=Authentication.user,$scope.imageURL=$scope.user.profileImageURL,$scope.uploader=new FileUploader({url:"api/users/picture",alias:"newProfilePicture"}),$scope.uploader.filters.push({name:"imageFilter",fn:function(item,options){var type="|"+item.type.slice(item.type.lastIndexOf("/")+1)+"|";return-1!=="|jpg|png|jpeg|bmp|gif|".indexOf(type)}}),$scope.uploader.onAfterAddingFile=function(fileItem){if($window.FileReader){var fileReader=new FileReader;fileReader.readAsDataURL(fileItem._file),fileReader.onload=function(fileReaderEvent){$timeout(function(){$scope.imageURL=fileReaderEvent.target.result},0)}}},$scope.uploader.onSuccessItem=function(fileItem,response,status,headers){$scope.success=!0,$scope.user=Authentication.user=response,$scope.cancelUpload()},$scope.uploader.onErrorItem=function(fileItem,response,status,headers){$scope.cancelUpload(),$scope.error=response.message},$scope.uploadProfilePicture=function(){$scope.success=$scope.error=null,$scope.uploader.uploadAll()},$scope.cancelUpload=function(){$scope.uploader.clearQueue(),$scope.imageURL=$scope.user.profileImageURL}}]),angular.module("users").controller("EditProfileController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.updateUserProfile=function(isValid){if($scope.success=$scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","userForm"),!1;var user=new Users($scope.user);user.$update(function(response){$scope.$broadcast("show-errors-reset","userForm"),$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}}]),angular.module("users").controller("SocialAccountsController",["$scope","$http","Authentication",function($scope,$http,Authentication){$scope.user=Authentication.user,$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/api/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","Authentication",function($scope,Authentication){$scope.user=Authentication.user}]),angular.module("users").directive("passwordValidator",["PasswordValidator",function(PasswordValidator){return{require:"ngModel",link:function(scope,element,attrs,ngModel){ngModel.$validators.requirements=function(password){var status=!0;if(password){var result=PasswordValidator.getResult(password),requirementsIdx=0,requirementsMeter=[{color:"danger",progress:"20"},{color:"warning",progress:"40"},{color:"info",progress:"60"},{color:"primary",progress:"80"},{color:"success",progress:"100"}];result.errors.length<requirementsMeter.length&&(requirementsIdx=requirementsMeter.length-result.errors.length-1),scope.requirementsColor=requirementsMeter[requirementsIdx].color,scope.requirementsProgress=requirementsMeter[requirementsIdx].progress,result.errors.length?(scope.popoverMsg=PasswordValidator.getPopoverMsg(),scope.passwordErrors=result.errors,status=!1):(scope.popoverMsg="",scope.passwordErrors=[],status=!0)}return status}}}}]),angular.module("users").directive("passwordVerify",[function(){return{require:"ngModel",scope:{passwordVerify:"="},link:function(scope,element,attrs,ngModel){scope.$watch(function(){var combined;return(scope.passwordVerify||ngModel)&&(combined=scope.passwordVerify+"_"+ngModel),combined},function(value){value&&(ngModel.$validators.passwordVerify=function(password){var origin=scope.passwordVerify;return origin!==password?!1:!0})})}}}]),angular.module("users").directive("lowercase",function(){return{require:"ngModel",link:function(scope,element,attrs,modelCtrl){modelCtrl.$parsers.push(function(input){return input?input.toLowerCase():""}),element.css("text-transform","lowercase")}}}),angular.module("users").factory("Authentication",["$window",function($window){var auth={user:$window.user};return auth}]),angular.module("users").factory("PasswordValidator",["$window",function($window){var owaspPasswordStrengthTest=$window.owaspPasswordStrengthTest;return{getResult:function(password){var result=owaspPasswordStrengthTest.test(password);return result},getPopoverMsg:function(){var popoverMsg="Please enter a passphrase or password with greater than 10 characters, numbers, lowercase, upppercase, and special characters.";return popoverMsg}}}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("api/users",{},{update:{method:"PUT"}})}]),angular.module("users.admin").factory("Admin",["$resource",function($resource){return $resource("api/users/:userId",{userId:"@_id"},{update:{method:"PUT"}})}]);